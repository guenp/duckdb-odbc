name: ODBC
on:
  push:
  pull_request:
  workflow_dispatch:
  workflow_call:
  repository_dispatch:

env:
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  OVERRIDE_GIT_DESCRIBE: ${{ inputs.override_git_describe }}
  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true

concurrency:
  group: ODBC-${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref || '' }}-${{ github.base_ref || '' }}-${{ github.ref != 'refs/heads/main' || github.sha }}-${{ inputs.override_git_describe }}
  cancel-in-progress: true

jobs:

  odbc-windows-amd64:
    name: ODBC Windows (amd64)
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.git_ref }}
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Setup Ccache
        uses: hendrikmuhs/ccache-action@main
        with:
          key: ${{ github.job }}
          save: ${{ github.ref == 'refs/heads/main' || github.repository != 'duckdb/duckdb-java' }}

      - name: Build
        shell: bash
        run: make release

      - name: Setup ODBC
        shell: bash
        run: |
          ./build/release/bin/Release/odbc_install.exe //CI //Install
          Reg Query "HKLM\SOFTWARE\ODBC\ODBC.INI\ODBC Data Sources"
          Reg Query "HKLM\SOFTWARE\ODBC\ODBC.INI\DuckDB"
          Reg Query "HKLM\SOFTWARE\ODBC\ODBCINST.INI\DuckDB Driver"

      - name: Enable ODBC Trace HKCU
        shell: bash
        run: |
          REG ADD "HKCU\SOFTWARE\ODBC\ODBC.INI\ODBC" //f
          REG ADD "HKCU\SOFTWARE\ODBC\ODBC.INI\ODBC" //v Trace //t REG_SZ //d 1
          REG ADD "HKCU\SOFTWARE\ODBC\ODBC.INI\ODBC" //v TraceDll //t REG_SZ //d "C:\Windows\system32\odbctrac.dll"
          REG ADD "HKCU\SOFTWARE\ODBC\ODBC.INI\ODBC" //v TraceFile //t REG_SZ //d "D:\a\duckdb-odbc\duckdb-odbc\ODBC_TRACE.log"
          echo "----------------------------------------------------------------"
          Reg Query "HKCU\SOFTWARE\ODBC\ODBC.INI\ODBC"

      - name: Test Standard ODBC tests
        if: ${{ inputs.skip_tests != 'true' }}
        shell: bash
        run: |
          ./build/release/bin/Release/test_odbc.exe

      - name: Setup Register For Connection Tests
        shell: bash
        run: |
          REG ADD "HKCU\SOFTWARE\ODBC\ODBC.INI\DuckDB" //v database //t REG_SZ //d "/d/a/duckdb-odbc/duckdb-odbc/test/sql/storage_version/storage_version.db"
          REG ADD "HKCU\SOFTWARE\ODBC\ODBC.INI\DuckDB" //v access_mode //t REG_SZ //d "READ_ONLY"
          REG ADD "HKCU\SOFTWARE\ODBC\ODBC.INI\DuckDB" //v allow_unsigned_extensions //t REG_SZ //d "true"
          echo "----------------------------------------------------------------"
          Reg Query "HKCU\SOFTWARE\ODBC\ODBC.INI\DuckDB"

      - name: Test Connection ODBC tests
        if: ${{ inputs.skip_tests != 'true' }}
        shell: bash
        run: |
          ./build/release/bin/Release/test_connection_odbc.exe

      - name: Print ODBC trace on failure
        if: ${{ failure() }}
        shell: bash
        run: cat ODBC_TRACE.log

      - name: System.Data.ODBC tests
        shell: bash
        run: |
          ./build/release/bin/Release/SystemDataODBC_tests.exe

      - name: Deploy
        shell: bash
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.S3_DUCKDB_STAGING_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_DUCKDB_STAGING_KEY }}
        run: |
          choco install zip -y --force
          zip -j duckdb_odbc-windows-amd64.zip ./build/release/bin/Release/*
          ./scripts/upload-assets-to-staging.sh github_release duckdb_odbc-windows-amd64.zip

      - uses: actions/upload-artifact@v3
        with:
          name: odbc-windows-amd64
          path: |
            duckdb_odbc-windows-amd64.zip
